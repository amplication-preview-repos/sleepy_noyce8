/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InsuranceAgent } from "./InsuranceAgent";
import { InsuranceAgentCountArgs } from "./InsuranceAgentCountArgs";
import { InsuranceAgentFindManyArgs } from "./InsuranceAgentFindManyArgs";
import { InsuranceAgentFindUniqueArgs } from "./InsuranceAgentFindUniqueArgs";
import { CreateInsuranceAgentArgs } from "./CreateInsuranceAgentArgs";
import { UpdateInsuranceAgentArgs } from "./UpdateInsuranceAgentArgs";
import { DeleteInsuranceAgentArgs } from "./DeleteInsuranceAgentArgs";
import { InsurancePolicyFindManyArgs } from "../../insurancePolicy/base/InsurancePolicyFindManyArgs";
import { InsurancePolicy } from "../../insurancePolicy/base/InsurancePolicy";
import { InsuranceAgentService } from "../insuranceAgent.service";
@graphql.Resolver(() => InsuranceAgent)
export class InsuranceAgentResolverBase {
  constructor(protected readonly service: InsuranceAgentService) {}

  async _insuranceAgentsMeta(
    @graphql.Args() args: InsuranceAgentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InsuranceAgent])
  async insuranceAgents(
    @graphql.Args() args: InsuranceAgentFindManyArgs
  ): Promise<InsuranceAgent[]> {
    return this.service.insuranceAgents(args);
  }

  @graphql.Query(() => InsuranceAgent, { nullable: true })
  async insuranceAgent(
    @graphql.Args() args: InsuranceAgentFindUniqueArgs
  ): Promise<InsuranceAgent | null> {
    const result = await this.service.insuranceAgent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InsuranceAgent)
  async createInsuranceAgent(
    @graphql.Args() args: CreateInsuranceAgentArgs
  ): Promise<InsuranceAgent> {
    return await this.service.createInsuranceAgent({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InsuranceAgent)
  async updateInsuranceAgent(
    @graphql.Args() args: UpdateInsuranceAgentArgs
  ): Promise<InsuranceAgent | null> {
    try {
      return await this.service.updateInsuranceAgent({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InsuranceAgent)
  async deleteInsuranceAgent(
    @graphql.Args() args: DeleteInsuranceAgentArgs
  ): Promise<InsuranceAgent | null> {
    try {
      return await this.service.deleteInsuranceAgent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [InsurancePolicy], { name: "insurancePolicies" })
  async findInsurancePolicies(
    @graphql.Parent() parent: InsuranceAgent,
    @graphql.Args() args: InsurancePolicyFindManyArgs
  ): Promise<InsurancePolicy[]> {
    const results = await this.service.findInsurancePolicies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
