/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ClaimUpdateManyWithoutInsurancePoliciesInput } from "./ClaimUpdateManyWithoutInsurancePoliciesInput";
import {
  ValidateNested,
  IsOptional,
  IsNumber,
  IsDate,
  IsString,
} from "class-validator";
import { Type } from "class-transformer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { InsuranceAgentWhereUniqueInput } from "../../insuranceAgent/base/InsuranceAgentWhereUniqueInput";

@InputType()
class InsurancePolicyUpdateInput {
  @ApiProperty({
    required: false,
    type: () => ClaimUpdateManyWithoutInsurancePoliciesInput,
  })
  @ValidateNested()
  @Type(() => ClaimUpdateManyWithoutInsurancePoliciesInput)
  @IsOptional()
  @Field(() => ClaimUpdateManyWithoutInsurancePoliciesInput, {
    nullable: true,
  })
  claims?: ClaimUpdateManyWithoutInsurancePoliciesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  coverageAmount?: number | null;

  @ApiProperty({
    required: false,
    type: () => CustomerWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CustomerWhereUniqueInput)
  @IsOptional()
  @Field(() => CustomerWhereUniqueInput, {
    nullable: true,
  })
  customer?: CustomerWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  effectiveDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  expiryDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => InsuranceAgentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => InsuranceAgentWhereUniqueInput)
  @IsOptional()
  @Field(() => InsuranceAgentWhereUniqueInput, {
    nullable: true,
  })
  insuranceAgent?: InsuranceAgentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  policyNumber?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  premiumAmount?: number | null;
}

export { InsurancePolicyUpdateInput as InsurancePolicyUpdateInput };
