/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { InsurancePolicyService } from "../insurancePolicy.service";
import { InsurancePolicyCreateInput } from "./InsurancePolicyCreateInput";
import { InsurancePolicyWhereInput } from "./InsurancePolicyWhereInput";
import { InsurancePolicyWhereUniqueInput } from "./InsurancePolicyWhereUniqueInput";
import { InsurancePolicyFindManyArgs } from "./InsurancePolicyFindManyArgs";
import { InsurancePolicyUpdateInput } from "./InsurancePolicyUpdateInput";
import { InsurancePolicy } from "./InsurancePolicy";
import { ClaimFindManyArgs } from "../../claim/base/ClaimFindManyArgs";
import { Claim } from "../../claim/base/Claim";
import { ClaimWhereUniqueInput } from "../../claim/base/ClaimWhereUniqueInput";

export class InsurancePolicyGrpcControllerBase {
  constructor(protected readonly service: InsurancePolicyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InsurancePolicy })
  @GrpcMethod("InsurancePolicyService", "createInsurancePolicy")
  async createInsurancePolicy(
    @common.Body() data: InsurancePolicyCreateInput
  ): Promise<InsurancePolicy> {
    return await this.service.createInsurancePolicy({
      data: {
        ...data,

        customer: data.customer
          ? {
              connect: data.customer,
            }
          : undefined,

        insuranceAgent: data.insuranceAgent
          ? {
              connect: data.insuranceAgent,
            }
          : undefined,
      },
      select: {
        coverageAmount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        effectiveDate: true,
        expiryDate: true,
        id: true,

        insuranceAgent: {
          select: {
            id: true,
          },
        },

        policyNumber: true,
        premiumAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InsurancePolicy] })
  @ApiNestedQuery(InsurancePolicyFindManyArgs)
  @GrpcMethod("InsurancePolicyService", "insurancePolicies")
  async insurancePolicies(
    @common.Req() request: Request
  ): Promise<InsurancePolicy[]> {
    const args = plainToClass(InsurancePolicyFindManyArgs, request.query);
    return this.service.insurancePolicies({
      ...args,
      select: {
        coverageAmount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        effectiveDate: true,
        expiryDate: true,
        id: true,

        insuranceAgent: {
          select: {
            id: true,
          },
        },

        policyNumber: true,
        premiumAmount: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InsurancePolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InsurancePolicyService", "insurancePolicy")
  async insurancePolicy(
    @common.Param() params: InsurancePolicyWhereUniqueInput
  ): Promise<InsurancePolicy | null> {
    const result = await this.service.insurancePolicy({
      where: params,
      select: {
        coverageAmount: true,
        createdAt: true,

        customer: {
          select: {
            id: true,
          },
        },

        effectiveDate: true,
        expiryDate: true,
        id: true,

        insuranceAgent: {
          select: {
            id: true,
          },
        },

        policyNumber: true,
        premiumAmount: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InsurancePolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InsurancePolicyService", "updateInsurancePolicy")
  async updateInsurancePolicy(
    @common.Param() params: InsurancePolicyWhereUniqueInput,
    @common.Body() data: InsurancePolicyUpdateInput
  ): Promise<InsurancePolicy | null> {
    try {
      return await this.service.updateInsurancePolicy({
        where: params,
        data: {
          ...data,

          customer: data.customer
            ? {
                connect: data.customer,
              }
            : undefined,

          insuranceAgent: data.insuranceAgent
            ? {
                connect: data.insuranceAgent,
              }
            : undefined,
        },
        select: {
          coverageAmount: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          effectiveDate: true,
          expiryDate: true,
          id: true,

          insuranceAgent: {
            select: {
              id: true,
            },
          },

          policyNumber: true,
          premiumAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InsurancePolicy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("InsurancePolicyService", "deleteInsurancePolicy")
  async deleteInsurancePolicy(
    @common.Param() params: InsurancePolicyWhereUniqueInput
  ): Promise<InsurancePolicy | null> {
    try {
      return await this.service.deleteInsurancePolicy({
        where: params,
        select: {
          coverageAmount: true,
          createdAt: true,

          customer: {
            select: {
              id: true,
            },
          },

          effectiveDate: true,
          expiryDate: true,
          id: true,

          insuranceAgent: {
            select: {
              id: true,
            },
          },

          policyNumber: true,
          premiumAmount: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/claims")
  @ApiNestedQuery(ClaimFindManyArgs)
  @GrpcMethod("InsurancePolicyService", "findManyClaims")
  async findManyClaims(
    @common.Req() request: Request,
    @common.Param() params: InsurancePolicyWhereUniqueInput
  ): Promise<Claim[]> {
    const query = plainToClass(ClaimFindManyArgs, request.query);
    const results = await this.service.findClaims(params.id, {
      ...query,
      select: {
        amountClaimed: true,
        claimNumber: true,
        createdAt: true,
        dateOfClaim: true,
        description: true,
        id: true,

        insurancePolicy: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/claims")
  @GrpcMethod("InsurancePolicyService", "connectClaims")
  async connectClaims(
    @common.Param() params: InsurancePolicyWhereUniqueInput,
    @common.Body() body: ClaimWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      claims: {
        connect: body,
      },
    };
    await this.service.updateInsurancePolicy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/claims")
  @GrpcMethod("InsurancePolicyService", "updateClaims")
  async updateClaims(
    @common.Param() params: InsurancePolicyWhereUniqueInput,
    @common.Body() body: ClaimWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      claims: {
        set: body,
      },
    };
    await this.service.updateInsurancePolicy({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/claims")
  @GrpcMethod("InsurancePolicyService", "disconnectClaims")
  async disconnectClaims(
    @common.Param() params: InsurancePolicyWhereUniqueInput,
    @common.Body() body: ClaimWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      claims: {
        disconnect: body,
      },
    };
    await this.service.updateInsurancePolicy({
      where: params,
      data,
      select: { id: true },
    });
  }
}
