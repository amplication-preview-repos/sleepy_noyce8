/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InsurancePolicy } from "./InsurancePolicy";
import { InsurancePolicyCountArgs } from "./InsurancePolicyCountArgs";
import { InsurancePolicyFindManyArgs } from "./InsurancePolicyFindManyArgs";
import { InsurancePolicyFindUniqueArgs } from "./InsurancePolicyFindUniqueArgs";
import { CreateInsurancePolicyArgs } from "./CreateInsurancePolicyArgs";
import { UpdateInsurancePolicyArgs } from "./UpdateInsurancePolicyArgs";
import { DeleteInsurancePolicyArgs } from "./DeleteInsurancePolicyArgs";
import { ClaimFindManyArgs } from "../../claim/base/ClaimFindManyArgs";
import { Claim } from "../../claim/base/Claim";
import { Customer } from "../../customer/base/Customer";
import { InsuranceAgent } from "../../insuranceAgent/base/InsuranceAgent";
import { InsurancePolicyService } from "../insurancePolicy.service";
@graphql.Resolver(() => InsurancePolicy)
export class InsurancePolicyResolverBase {
  constructor(protected readonly service: InsurancePolicyService) {}

  async _insurancePoliciesMeta(
    @graphql.Args() args: InsurancePolicyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InsurancePolicy])
  async insurancePolicies(
    @graphql.Args() args: InsurancePolicyFindManyArgs
  ): Promise<InsurancePolicy[]> {
    return this.service.insurancePolicies(args);
  }

  @graphql.Query(() => InsurancePolicy, { nullable: true })
  async insurancePolicy(
    @graphql.Args() args: InsurancePolicyFindUniqueArgs
  ): Promise<InsurancePolicy | null> {
    const result = await this.service.insurancePolicy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InsurancePolicy)
  async createInsurancePolicy(
    @graphql.Args() args: CreateInsurancePolicyArgs
  ): Promise<InsurancePolicy> {
    return await this.service.createInsurancePolicy({
      ...args,
      data: {
        ...args.data,

        customer: args.data.customer
          ? {
              connect: args.data.customer,
            }
          : undefined,

        insuranceAgent: args.data.insuranceAgent
          ? {
              connect: args.data.insuranceAgent,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => InsurancePolicy)
  async updateInsurancePolicy(
    @graphql.Args() args: UpdateInsurancePolicyArgs
  ): Promise<InsurancePolicy | null> {
    try {
      return await this.service.updateInsurancePolicy({
        ...args,
        data: {
          ...args.data,

          customer: args.data.customer
            ? {
                connect: args.data.customer,
              }
            : undefined,

          insuranceAgent: args.data.insuranceAgent
            ? {
                connect: args.data.insuranceAgent,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InsurancePolicy)
  async deleteInsurancePolicy(
    @graphql.Args() args: DeleteInsurancePolicyArgs
  ): Promise<InsurancePolicy | null> {
    try {
      return await this.service.deleteInsurancePolicy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Claim], { name: "claims" })
  async findClaims(
    @graphql.Parent() parent: InsurancePolicy,
    @graphql.Args() args: ClaimFindManyArgs
  ): Promise<Claim[]> {
    const results = await this.service.findClaims(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customer",
  })
  async getCustomer(
    @graphql.Parent() parent: InsurancePolicy
  ): Promise<Customer | null> {
    const result = await this.service.getCustomer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => InsuranceAgent, {
    nullable: true,
    name: "insuranceAgent",
  })
  async getInsuranceAgent(
    @graphql.Parent() parent: InsurancePolicy
  ): Promise<InsuranceAgent | null> {
    const result = await this.service.getInsuranceAgent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
