/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InsurancePolicy as PrismaInsurancePolicy,
  Claim as PrismaClaim,
  Customer as PrismaCustomer,
  InsuranceAgent as PrismaInsuranceAgent,
} from "@prisma/client";

export class InsurancePolicyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InsurancePolicyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.insurancePolicy.count(args);
  }

  async insurancePolicies(
    args: Prisma.InsurancePolicyFindManyArgs
  ): Promise<PrismaInsurancePolicy[]> {
    return this.prisma.insurancePolicy.findMany(args);
  }
  async insurancePolicy(
    args: Prisma.InsurancePolicyFindUniqueArgs
  ): Promise<PrismaInsurancePolicy | null> {
    return this.prisma.insurancePolicy.findUnique(args);
  }
  async createInsurancePolicy(
    args: Prisma.InsurancePolicyCreateArgs
  ): Promise<PrismaInsurancePolicy> {
    return this.prisma.insurancePolicy.create(args);
  }
  async updateInsurancePolicy(
    args: Prisma.InsurancePolicyUpdateArgs
  ): Promise<PrismaInsurancePolicy> {
    return this.prisma.insurancePolicy.update(args);
  }
  async deleteInsurancePolicy(
    args: Prisma.InsurancePolicyDeleteArgs
  ): Promise<PrismaInsurancePolicy> {
    return this.prisma.insurancePolicy.delete(args);
  }

  async findClaims(
    parentId: string,
    args: Prisma.ClaimFindManyArgs
  ): Promise<PrismaClaim[]> {
    return this.prisma.insurancePolicy
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .claims(args);
  }

  async getCustomer(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.insurancePolicy
      .findUnique({
        where: { id: parentId },
      })
      .customer();
  }

  async getInsuranceAgent(
    parentId: string
  ): Promise<PrismaInsuranceAgent | null> {
    return this.prisma.insurancePolicy
      .findUnique({
        where: { id: parentId },
      })
      .insuranceAgent();
  }
}
