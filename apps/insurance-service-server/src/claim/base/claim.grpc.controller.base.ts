/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { ClaimService } from "../claim.service";
import { ClaimCreateInput } from "./ClaimCreateInput";
import { ClaimWhereInput } from "./ClaimWhereInput";
import { ClaimWhereUniqueInput } from "./ClaimWhereUniqueInput";
import { ClaimFindManyArgs } from "./ClaimFindManyArgs";
import { ClaimUpdateInput } from "./ClaimUpdateInput";
import { Claim } from "./Claim";

export class ClaimGrpcControllerBase {
  constructor(protected readonly service: ClaimService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Claim })
  @GrpcMethod("ClaimService", "createClaim")
  async createClaim(@common.Body() data: ClaimCreateInput): Promise<Claim> {
    return await this.service.createClaim({
      data: {
        ...data,

        insurancePolicy: data.insurancePolicy
          ? {
              connect: data.insurancePolicy,
            }
          : undefined,
      },
      select: {
        amountClaimed: true,
        claimNumber: true,
        createdAt: true,
        dateOfClaim: true,
        description: true,
        id: true,

        insurancePolicy: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Claim] })
  @ApiNestedQuery(ClaimFindManyArgs)
  @GrpcMethod("ClaimService", "claims")
  async claims(@common.Req() request: Request): Promise<Claim[]> {
    const args = plainToClass(ClaimFindManyArgs, request.query);
    return this.service.claims({
      ...args,
      select: {
        amountClaimed: true,
        claimNumber: true,
        createdAt: true,
        dateOfClaim: true,
        description: true,
        id: true,

        insurancePolicy: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Claim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClaimService", "claim")
  async claim(
    @common.Param() params: ClaimWhereUniqueInput
  ): Promise<Claim | null> {
    const result = await this.service.claim({
      where: params,
      select: {
        amountClaimed: true,
        claimNumber: true,
        createdAt: true,
        dateOfClaim: true,
        description: true,
        id: true,

        insurancePolicy: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Claim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClaimService", "updateClaim")
  async updateClaim(
    @common.Param() params: ClaimWhereUniqueInput,
    @common.Body() data: ClaimUpdateInput
  ): Promise<Claim | null> {
    try {
      return await this.service.updateClaim({
        where: params,
        data: {
          ...data,

          insurancePolicy: data.insurancePolicy
            ? {
                connect: data.insurancePolicy,
              }
            : undefined,
        },
        select: {
          amountClaimed: true,
          claimNumber: true,
          createdAt: true,
          dateOfClaim: true,
          description: true,
          id: true,

          insurancePolicy: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Claim })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("ClaimService", "deleteClaim")
  async deleteClaim(
    @common.Param() params: ClaimWhereUniqueInput
  ): Promise<Claim | null> {
    try {
      return await this.service.deleteClaim({
        where: params,
        select: {
          amountClaimed: true,
          claimNumber: true,
          createdAt: true,
          dateOfClaim: true,
          description: true,
          id: true,

          insurancePolicy: {
            select: {
              id: true,
            },
          },

          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
